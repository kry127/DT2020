\import Utils
\import hw01 (fac)
\import lect01(< \as <1)

-- 1. Определите полиморфный tail для списков.
\func tail {A : \Type} (xs : List(A)) : List(A) \elim xs
  | nil => nil
  | cons x xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.
{-
-- не уменьшается структурно:
\func split-sort {A : \Type}  (cmp : A -> A -> Bool) (xs : List(A)) : List(A) \elim xs
  | nil => nil
  | cons x xs => \case split {A} cmp x nil nil xs \with {
    | pair =>  split-sort {A} cmp pair.1 ++ (cons x nil) ++ split-sort {A} cmp pair.2
  }
  \where
    \func split {A : \Type} (cmp : A -> A -> Bool) (splitter : A) (acc_left acc_right xs : List(A)) : \Sigma (List A) (List A) \elim xs
      | nil => (acc_left, acc_right)
      | cons x xs => \case cmp splitter x \with {
        | true => split cmp splitter (cons x acc_left) acc_right xs
        | false => split cmp splitter acc_left (cons x acc_right) xs
      }
 -}

\func insertion-sort {A : \Type} (cmp : A -> A -> Bool) (xs : List(A)) : List(A) \elim xs
  | nil => nil
  | cons x xs => insert cmp x (insertion-sort cmp xs)
    \where
      \func insert {A : \Type} (cmp : A -> A -> Bool) (x : A) (xs : List(A)) : List(A) \elim xs
        | nil => cons x nil
        | cons y ys => \case cmp x y \with {
          | true => cons x (cons y ys)
          | false => cons y (insert cmp x ys)
        }

-- протестируем сортировку
\func num-cmp (a b : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x `num-cmp y

\func insertion-nat-sort => insertion-sort {Nat} num-cmp
\func insertion-sort-test1 : insertion-nat-sort nil = nil => idp
\func insertion-sort-test2 : insertion-nat-sort (cons 1 nil) = (cons 1 nil)  => idp
\func insertion-sort-test3 : insertion-nat-sort (cons 3 (cons 2 (cons 1 nil))) = (cons 1 (cons 2 (cons 3 nil))) => idp
\func insertion-sort-test4 : insertion-nat-sort (cons 1 (cons 2 (cons 3 nil))) = (cons 1 (cons 2 (cons 3 nil))) => idp
\func insertion-sort-test5 : insertion-nat-sort (cons 4 (cons 1 (cons 2 (cons 5 (cons 3 nil))))) =
                                                (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil))))) => idp
\func insertion-sort-test6 : insertion-nat-sort (cons 4 (cons 1 (cons 6 (cons 2 (cons 5 (cons 3 nil)))))) =
                                                (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 nil)))))) => idp


-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6.
\func facTest1 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R => \case h \with {
  | inl a => f a
  | inr b => g b
}


-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (p : \Sigma P Q) : R => f p.1 p.2
-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Either P Q -> \Sigma P Q) : \Sigma (P -> Q) ( Q -> P) =>
  (\lam (p : P) => (f (inl p)).2, \lam (q : Q) => (f (inr q)).1)
-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (fff : (((P -> Q) -> P) -> P) -> Q) : Q => fff (\lam (ff : (P -> Q) -> P)  =>
                                                                      ff (\lam (p : P) => fff (\lam (ff' : ((P -> Q) -> P)) => p)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty =>
  \lam (p3 : P 3) => h (3, p3)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (f : \Pi (x : Nat) (P x) -> (Q x)) (g : \Sigma (x : Nat) (P x)) : (\Sigma (x : Nat) (Q x))
  \elim g -- засвидетельствуем, для какого x выполняется P, т.е. x_existent -- свидетель выполнения одноместного предиката P
    | (x_existent, x_pred) => (x_existent, f x_existent x_pred)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> (Either ((P x) -> Empty) ((Q x) -> Empty))) : P 3 -> (Q 3 -> Empty) =>
  \case f 3 \with {
    | inl a => (\lam (p3 : P 3) (q3 : Q 3) => a p3)
    | inr b => (\lam (p3 : P 3) (q3 : Q 3) => b q3)
  }
-- можно было применить теорему о дедукции, было бы меньше кода:
\func s4' (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> (Either ((P x) -> Empty) ((Q x) -> Empty))) (p3 : P 3) : (Q 3 -> Empty) =>
  \case f 3 \with {
    | inl a => (\lam (q3 : Q 3) => a p3)
    | inr b => (\lam (q3 : Q 3) => b q3)
  }