\import Algebra.Meta
\import Data.List
\import Data.Or
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\import hw02
\import lect08
\open LinearOrder

-- 1. Докажите, что Perm l1 l2 тогда и только тогда, когда Insertion.sort l1 = Insertion.sort l2.
\func perm->sort-eq {A : Dec} {l1 l2 : List A} (p : Perm l1 l2) : Insertion.sort l1 = Insertion.sort l2
  \elim l1, l2, p
    | nil, nil, _ => idp
    | l1, l2, perm-trans p1 p2 => perm->sort-eq p1 *> perm->sort-eq p2
    | :: a l1, :: a' l2, perm-:: eq subperm => rewriteI eq (pmap (Insertion.sort.insert a) (perm->sort-eq subperm))
    | :: a (:: e l1), :: a' (:: e1 l2), perm-swap a=e1 e=a' sl1=sl2 =>
      rewrite a=e1 (rewrite e=a' (rewrite sl1=sl2 (Insertion.sort-perm.insert-comm e1 a' (Insertion.sort l2))))
    -- | :: a (:: e l1), :: a' (:: e1 l2), perm-swap a=e1 e=a' sl1=sl2 => rewrite a=e1 (rewrite e=a' (pmap Insertion.sort sl1=sl2))

-- докажем очевидную boilerplate лемму, как мы сделали для perm-refl
\func perm-sym-lemma {A : \Type} {xs ys : List A} (perm : Perm xs ys) : Perm ys xs \elim xs, ys, perm
  | nil, nil, perm-nil => perm-nil
  | l1, l2, perm-trans p1 p2 => perm-trans (perm-sym-lemma p2) (perm-sym-lemma p1)
  | :: x xs, :: y ys, perm-:: eq subperm => perm-:: (inv eq) (perm-sym-lemma subperm)
  | :: a (:: e l1), :: a' (:: e1 l2), perm-swap a=e1 e=a' sl1=sl2 => (perm-swap (inv e=a') (inv a=e1) (inv sl1=sl2))

\func sort-eq->perm {A : Dec} {l1 l2 : List A} (p : Insertion.sort l1 = Insertion.sort l2) : Perm l1 l2
  => \let | x => (rewriteI p (Insertion.sort-perm l2))
    \in perm-trans (Insertion.sort-perm l1) (perm-sym-lemma x)

-- 2. Докажите, что спецификация "результат является перестановкой входа и отсортирован" является полной для функции sort.

-- мы уже доказали для Insertion.sort выполнение спецификации: Insertion.sort-sorted и Insertion.sort-perm
-- теперь необходимо показать полноту спецификации.
\func completeness {A : Dec} (sort : List A -> List A) (l : List A) (p : Perm l (sort l)) (s : Sorted (sort l)) : sort l = Insertion.sort l =>
  inv (perm->sort-eq p *> sort-of-sorted (sort l) s)
  \where {
    \func sort-of-sorted {A : Dec} (xs : List A) (s : Sorted xs) : Insertion.sort xs = xs
    \elim xs, s
      | nil, sorted-nil => idp
      | :: a xs, sorted-cons a<=xs s =>
        \let almost_proof => pmap (Insertion.sort.insert a) (sort-of-sorted xs s)
        \in almost_proof *> safe-insert-to-sorted-list a xs a<=xs s

    \func safe-insert-to-sorted-list {A : Dec} (a : A) (xs : List A) (leq : a <= headDef a xs) (s : Sorted xs) : Insertion.sort.insert a xs = a :: xs
    \elim xs, s
      | nil, sorted-nil => idp
      | :: a1 xs, sorted-cons a1<=xs ss => mcases equation \with {
        | inl a1<a => contradiction -- если a1 != a, мы не можем сначала вставлять в одном порядке, потом в другом, чтобы получить желаемый результат
      }
  }

-- 3. Определите факториал через хвостовую рекурсию.
--    Докажите, что он равен обычному определению факториала.
\open Nat \hiding (<=)
\import hw01 (fac)-- обычное определение факториала
\import lect04 (+-comm)
\import hw04 (assoc-add, rdistr, ldistr)

-- очевидные теоремы о неравенстве
\func refl-<= (m : Nat) : m Nat.<= m \elim m
  | 0 => zero<=_
  | suc m => suc<=suc (refl-<= m)

\func refl-<=suc {m n : Nat} (p : m Nat.<= n) : m Nat.<= suc n \elim m, n, p
  | 0, _, _ => zero<=_
  | suc m, suc n, suc<=suc ss => suc<=suc (refl-<=suc ss)

\func refl-<=pred {m n : Nat} (p : suc m Nat.<= n) : m Nat.<= n \elim n, p
  | 0, _ => contradiction
  | suc n, suc<=suc pp => refl-<=suc pp

-- докажем коммутативность умножения, оказалось, что это не так просто
\func *comm (m n : Nat) : m * n = n * m => *comm-fuel m n
  \where {
    -- пришлось применить fuel паттерн, что существенно снизило читаемость доказательства
    -- он считает, что это не структурно-рекурсивные вызовы без fuel, который ограничивает произведение m*n
    \func *comm-fuel (m n : Nat): m * n = n * m
      | 0, 0 => idp
      | 0, suc n => *comm-fuel 0 n
      | suc m, 0 => *comm-fuel m 0
      | suc m, suc n
      => pmap suc (pmap (`+ m) (*comm-fuel (suc m) n))
      *> (inv (pmap (\lam t => suc (t + n + m)) (*comm-fuel m n)))
      *> pmap suc (assoc-add {m * n} {n} {m})
      *> pmap (\lam t => suc (m * n + t)) (+-comm n m)
      *> pmap suc (inv (assoc-add {m * n} {m} {n}))
      *> inv (pmap suc (pmap (`+ n) (inv (*comm-fuel m (suc n)))))

    -- ещё одно бесячее часто встречаемое свойство, настолько очевидное, но по определению '+' само не вычисляется
    \func suc-m+n=eq (m n : Nat) : suc m + n = suc (m + n) \elim n
      | 0 => idp
      | suc n => pmap suc (suc-m+n=eq m n)
  }

-- докажем ассоциативность умножения:
\func *assoc (n m k : Nat) : (n * m) * k = n * (m * k) \elim k
  | 0 => idp
  | suc k => inv (rewrite (*assoc n m k) (ldistr n (m * k) m))

-- теперь определим хвосторекурсивный факториал
\func fact (a : Nat) : Nat => tail-rec-fact a 1
  \where {
    -- result -- это continuation нашего хвосторекурсивного вычисления
    \func tail-rec-fact (n : Nat) (\strict result : Nat) : Nat \elim n
      | 0 => result
      | suc n => tail-rec-fact n (result * (suc n))

    -- также докажем очевидный факт, что начальное значение аккумулятора задаёт только кратность результата
    \func tail-rec-fact=any (m n k : Nat) : m * (tail-rec-fact n k) = tail-rec-fact n (m * k) \elim n
      | 0 => idp
      | suc n => rewriteI (rewriteI (*assoc m k n) (ldistr m (k * n) k)) (tail-rec-fact=any m n (k * suc n))

    -- теперь мы легко можем показать, что новая функция fact обладает одним из двух основных свойств факториала:
    \func lemma-of-step-fact-induction (a : Nat) : suc a * fact a = fact (suc a) =>
      (tail-rec-fact=any (suc a) a 1) *> (pmap (\lam t => tail-rec-fact a (suc t)) (*comm a 1))
  }

-- Вариант 1: хотим доказать экстенсиональное равенство fact = fac
-- Думал, что тяжело, но оказалось, что доказательство коммутативности умножения -- сложнее
\func extensional-eq-fac=fact (a : Nat) : fac a = fact a
  | 0 => idp -- здесь доказано первое свойство факториала 0! = 1
  -- а строчкой ниже доказано второе свойство факториала (n+1)! = (n+1) * n!
  | suc a => pmap (* (suc a)) (extensional-eq-fac=fact a) *> fact.lemma-of-step-fact-induction a

-- теперь воспользуемся функциональной экстенсиональностью для окончательного доказательства равенства
\func extensional-proof : fac = fact => funExt (\lam _ => Nat) fac fact extensional-eq-fac=fact

-- Вариант 2: задать спецификацию факториала:
-- идея доказательства спецификации пришла только после доказательства экстенсионального равенства fact = fac
\func factorial-specification (f : Nat -> Nat) (fac-zero : f 0 = 1) (fac-suc : \Pi (n : Nat) -> (f (suc n)) = ((suc n) * (f n))) : f = fac
  => inv (funExt (\lam _ => Nat) fac f (extensional-eq-f=fact f fac-zero fac-suc))
  \where {
    \func extensional-eq-f=fact (f : Nat -> Nat) (fac-zero : f 0 = 1) (fac-suc : \Pi (n : Nat) -> (f (suc n)) = ((suc n) * (f n))) (a : Nat) : fac a = f a
      | f, fac-zero, fac-suc, 0 => inv fac-zero
      | f, fac-zero, fac-suc, suc a => pmap (suc a *) (extensional-eq-f=fact f fac-zero fac-suc a) *> inv (fac-suc a)
  }
-- таким образом, спецификация факториала полностью определяется двумя фактами: 0! = 1 и (n+1)! = (n+1) * n!, другого ожидать не следовало

-- докажем, что исходный факториал сам подходит под такую спецификацию. Очевидно, да:
\func fac-conforms-factorial-specification : fac = fac => factorial-specification fac idp (\lam i => idp)
-- докажем, что и факториал, определённый через хвостовую рекурсию подходит под спецификацию
\func fact-conforms-factorial-specification : fact = fac => factorial-specification fact idp (\lam n => inv (fact.lemma-of-step-fact-induction n))
-- как мы видим, в 'fact-conforms-factorial-specification' мы получили желаемое

-- то есть для доказательства корректности любого другого факториала достаточно доказать, что он соответствует спецификации,
-- что даст нам автоматическое равенство с функцией fac
