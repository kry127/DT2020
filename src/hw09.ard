\import Algebra.Group
\import Algebra.Meta
\import Arith.Nat (NatSemiring)
\import Data.Or ()
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths.Meta
\import hw01 ()
\import hw02
\import lect02 ()
\import lect07 (headDef)
\import lect04 (funExt)
\import Utils
\import hw08
\import lect09
\open Nat(+,*)

-- Hint: Ctrl + Shift + O со включенным "калькулятором" включает режим нормализации
-- Hint 2: unfold (FromDecToBool,FromBoolToDec) {?}

-- 1. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)
\func isEven-suc {n : Nat} (p : \Sigma (k : Nat)(n = 2 * k)) : \Sigma (m : Nat) (suc (suc n) = 2 * m)
  => (suc p.1, pmap (\lam i => (suc (suc i))) p.2)
\func isEven-pred {n : Nat} (p : \Sigma (k : Nat)(suc (suc n) = 2 * k)) : \Sigma (m : Nat) (n = 2 * m)
=>
  \case p.1 \as pp, p.2 : suc(suc n) = 2 * pp \return \Sigma (m : Nat) (n = 2 * m) \with {
    | suc n1, x => (n1, pmap (\lam i => pred (pred i)) x)
  }

\func isEven-dec : DecPred isEven => \lam a => isEven-decide a
 \where {
   \func isEven-decide (a : Nat) : Decide (isEven a)
     | 0 => yes (0, idp)
     | 1 => no (\lam e => \case e.1 \as ee, e.2 : 1 = 2 * ee \return Empty \with {
       | 0, ()
     })
     | suc (suc a) => \case isEven-decide a \with {
       | yes a-isEven => yes (isEven-suc a-isEven)
       | no a-notIsEven => no (\lam e => a-notIsEven (isEven-pred e))
     }
 }

-- 2. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => ListEq-decide dec
  \where {
    \func ListEq-decide {A : \Type} (dec : Eq A) (a a' : List A) : Decide (a = a') \elim a, a'
      | nil, nil => yes idp
      | nil, cons a a' => no contradiction -- Дословный перевод: нет противоречия :D
      | cons a a1, nil => no (\case __ \with {}) -- а вообще так более понятно
      | cons a as, cons a' as' => \case decideEq a a' \with {
        | no n => no (\lam e => n (pmap (headDef a __) e))
        | yes a1 => \case ListEq-decide dec as as' \with {
          | no n => no (\lam e => n (pmap tail e))
          | yes a2 => yes (rewrite a1 (rewrite a2 idp))
        }
      }
  }

-- 3. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p =>
  funExt (\lam _ => Bool) -- (FromDecToBool (FromBoolToDec p)) p
      (\lam x => unfold (FromBoolToDec, FromDecToBool) (\case p x \as px
                        \return
                            (\case \case \elim px \return Decide (T(px)) \with {
                              | true => yes {T true} ()
                              | false => no {T false} (\lam (x : T false) => x)
                            } \with {
                              | yes _ => true
                              | no _ => false
                            }) = px
      \with {
        | true => idp
        | false => idp
      }))

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P))
  : \Pi (x : A) -> (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x
  => \lam x => unfold (FromDecToBool, FromBoolToDec) (\case P.1 x \as p1x, P.2 x \as p2x : Decide(p1x)
  \return
                    T (\case p2x \with {
                      | yes _ => true
                      | no _ => false
                    }) <-> p1x
  \with {
    | p1x, yes a => (\lam _ => a, \lam _ => ())
    | p1x, no n => (\case __ \with {}, n)
  })


-- 4. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type0) -> A -> A => id' (\suc (\suc \lp)) (id' (\suc \lp) id)
\func idTest1' : \Pi (A : \Type \lp) -> A -> A => id' (\suc (\suc \lp)) (id' (\suc \lp) id) -- the same
\func idTest2 : \Type \lp -> \Type \lp => id' (\suc \lp) Maybe -- \lp = 0
\func idTest3 : \Type1 => id' (\suc (\suc \lp)) Functor
\func idTest4 : \Type1 => id' (\suc (\suc \lp)) (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Set} -> (A -> B) -> Maybe A -> Maybe B) : \Type0 => id' (\suc \lp) (Functor Maybe f)
\func idTest5' (f : \Pi {A B : \Set} -> (A -> B) -> Maybe A -> Maybe B) : \Prop => id' \lp (Functor Maybe f) -- что такое \Prop? Это \Type -1?

-- 5. Докажите следующий принцип индукции для списков.

-- идея доказательства похожа на доказательство для сильной индукции по натуральным числам
\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
  (xs : List A) : E xs => r xs (\lam ys ys<xs => List-ind-strong E r xs ys ys<xs)
 \where {
   \func List-ind-strong
     {A : \Type}
     (E : List A -> \Type)
     (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
     (xs ys : List A) (len-ys<len-xs : length ys < length xs) : E ys \elim xs, ys, len-ys<len-xs
     | cons a xss, nil, Nat.suc<=suc len-ys<len-xss => r nil (\lam ys contr => \case contr \with {})
     | cons a xss, cons y yys, Nat.suc<=suc len-ys<len-xss
       => r (cons y yys) (\lam zs zs<s[yys] => List-ind-strong E r xss zs  (<=-trans zs<s[yys] len-ys<len-xss))
 }

-- 6. Определите div через Nat-ind.


-- мы определяем свой минус, поскольку мы хотим оставаться в домене натуральных чисел
\func semi-minus (m n : Nat) : Nat
  | 0, n => 0
  | m, 0 => m
  | suc m, suc n => semi-minus m n
  \where {
    -- сразу в качестве затравки доказываем утверждение из разряда "Капитан Очевидность"
    \lemma semi-minus-<=-refl (m n : Nat) : semi-minus m n <= m
      | 0, 0 => Nat.zero<=_
      | 0, suc n => Nat.zero<=_
      | suc m, 0 => refl-<= (suc m)
      | suc m, suc n => refl-<=suc (semi-minus-<=-refl m n)

    -- второе утверждение -- это как первое, но со строгим неравенством, поэтому нам нужны свидетельства положительности аргументов
    \lemma <-refl-minus-positive (m n : Nat) (p : 0 < n) (q : 0 < m) : (semi-minus m n) < m
      | suc m, suc n, Nat.suc<=suc _p, Nat.suc<=suc _q => Nat.suc<=suc (semi-minus-<=-refl m n)
  }

-- определим структуру данных, которая позволяет закодировать принцип деления
-- основанный на том, что suc(n) выполняется с шагом k.
-- То есть, когда n делает k шагов, то мы накручиваем один churchSucc, а начинается всё с churchZero в случае n < k.
\data MyChurchNumeral (k n : Nat)
  | churchZero (n < k)
  | churchSucc (k <= n) (MyChurchNumeral k (semi-minus n k))
  \where {
    \use \coerce MyChurchNumeral-toNat {k n : Nat} (mcn : MyChurchNumeral k n) : Nat \elim mcn
          | churchZero _x => 0
          | churchSucc _x mcn => suc (MyChurchNumeral-toNat mcn)
  }

-- наконец, мы можем определить деление через Nat-ind
\func div (n k : Nat) (p : 0 < k) : Nat => Nat-ind (MyChurchNumeral k __)
    (\lam m indh => \case LinearOrder.dec<_<= m k \with {
      | Data.Or.Or.inl m<k => churchZero m<k
      | Data.Or.Or.inr m>=k => (churchSucc (leq-converter m>=k) (indh (semi-minus m k) (semi-minus.<-refl-minus-positive m k p (<=-trans p (leq-converter m>=k)))))
    }) n
    \where {
      \func leq-converter {a b : Nat} (p : a LinearOrder.<= b) : a <= b \elim p
        | LinearOrder.<=-equals p => rewrite p (refl-<= b)
        | LinearOrder.<=-less _x => refl-<=pred _x
    }

-- увы, кажется, корректность этого определения div нельзя вычислительно проверить:
-- \func divTest1 : div 100 5 (Nat.suc<=suc Nat.zero<=_) = 20 => idp
-- \func divTest2 : div 1 1 (Nat.suc<=suc Nat.zero<=_) = 1 => unfold (div) (unfold (Nat-ind) ({?}))

