\import Meta
\import Paths.Meta
\import Utils
\import lect04 (funExt)
\import lect09 (Decide, no, yes)
\import lect10

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (y : F A) : fmap (\lam (x : A) => x) y = y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A)
    : fmap (\lam x => g (f x)) y = fmap g (fmap f y)

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | >>=-left {A B : \Type} (a : A) (k : A -> F B) : (return a >>= k) = k a
  | >>=-right {A : \Type} (m : F A) : (m >>= return) = m
  | >>=-assoc {A B C : \Type} (m : F A) (k : A -> F B) (l : B -> F C) : ((m >>= k) >>= l) = (m >>= (\lam a => k a >>= l))
  | fmap {A B : \Type} (f : A -> B) => __ >>= (\lam x => return (f x))
  | fmap-id {A : \Type} (y : F A) => >>=-right y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (a : F A) => \let
    | trivial : (a >>= (\lam x => return (f x)) >>= (\lam x => return (g x))) = (a >>= (\lam x => return (f x)) >>= (\lam x => return (g x))) => idp
    | step1 => >>=-assoc a (\lam x => return (f x)) (\lam x => return (g x))
    | step2-internal (a : A)  => >>=-left (f a) (\lam x => return (g x))
    | step2-internal'  => path (\lam i => \lam a => step2-internal a @ i)
    | step2 => pmap (\lam ttt => a >>= ttt) step2-internal'
    \in sym (idp *> step1 *> step2)

\instance MaybeMonad : Monad Maybe
  | return => just
  | >>= m k => maybe nothing k m
  | >>=-left => \lam a k => idp
  | >>=-right => \lam mb => \case \elim mb \with {
    | nothing => idp
    | just a => idp
  }
  | >>=-assoc => \lam ma k1 k2 => \case \elim ma \with {
    | nothing => idp
    | just a => idp
  }

-- 1. Закончите определение \instance Monad для Term.

\func termMap {A B : \Type} (f : A -> B) (t : Term A) : Term B \elim t
  | var v => var (f v)
  | unit => unit
  | app t1 t2 => app (termMap f t1) (termMap f t2)
  | lam t => lam (termMap (fmap f) t)

{-
-- это некорректное определение termMap just
\func lift {A : \Type} (t : Term A) : Term (Maybe A) \elim t
  | var v => var (just v)
  | unit => unit
  | app t1 t2 => app (termMap just t1) (termMap just t2)
  | lam t => lam (termMap just t)
-}

\func liftM {A B : \Type} (k : A -> Term B) (m : Maybe A) : Term (Maybe B)
  => maybe (var nothing) (\lam a => termMap just (k a)) m

\instance TermMonad : Monad (Term)
  | return => var
  | \infixl 1 >>= {A B : \Type} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | >>=-left => \lam a k => idp
  | >>=-right => \case \elim __ \with {
    | var v => idp
    | unit => idp
    | app p0 p1 => rewrite (>>=-right-var p0) (rewrite (>>=-right-var p1) idp)
    | lam p0 => rewrite liftM-id (rewrite (>>=-right-var p0) idp)
  }
  | >>=-assoc => >>=-assoc-recursive
  \where {
    -- some lemmas for breaking 'dependent cycle'
    \func liftM-id {A : \Type}: (liftM {A} var) = var => funExt (\lam _ => Term (Maybe A)) {liftM var __} {var __} liftM-id'
    \func liftM-id' {A : \Type} (v : Maybe A) : (liftM var v) = var v \elim v
      | nothing => unfold (liftM) idp
      | just a => unfold (liftM) idp

    \func >>=-right-var {A : \Type} (tt : Term A) : (tt >>= var) = tt \elim tt
      | var v => idp
      | unit => idp
      | app tt1 tt2 => rewrite (>>=-right-var tt1) (rewrite (>>=-right-var tt2) idp)
      | lam tt => rewrite liftM-id (rewrite (>>=-right-var tt) idp)

    \func >>=-assoc-recursive {A B C : \Type} (m : Term A) (k : A -> Term B) (l : B -> Term C) : ((m >>= k) >>= l) = (m >>= (\lam a => k a >>= l))
      \elim m
        | var v => idp
        | unit => idp
        | app m1 m2 => rewriteI (>>=-assoc-recursive m1 k l) (rewriteI (>>=-assoc-recursive m2 k l) idp)
        | lam m => pmap lam (>>=-assoc-recursive m (liftM k) (liftM l) *> (pmap (m >>= __) (>>=-liftM-lemma k l)))

    \func >>=-liftM-lemma {A B C : \Type} (k : A -> Term B) (l : B -> Term C): (\lam a => liftM k a >>= liftM l) = liftM (\lam a => k a >>= l)
      => {?}
  }
-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Type} (t s : Term V) : \Type => {?}

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam s => \case s.2 \with {})
  | unit => no (\lam s => \case s.2 \with {})
  | app t1 t2 => {?}
  | lam t => \case strategy t \with {
    | yes a => {?}
    | no n => no (\lam s => n s)
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Type} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc _x => acc (\lam t' t->t' => appAccLeft {V} {t'} {s} (_x (app t' s) (appLeft t->t' idp)))

\func appAccRight {V : \Type} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc _x => acc (\lam s' s->s' => appAccRight {V} {t} {s'} (_x (app t s') (appRight idp s->s')))

\func subLamAcc {V : \Type} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc _x => acc (\lam t' t->t' => subLamAcc {V} {t'} (_x (lam t') (lamRed t->t')))

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}
