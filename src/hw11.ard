\import Algebra.Meta
\import Arith.Nat (pred)
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Order.StrictOrder
\import Paths (inv)
\import Paths.Meta
\import hw11 ()
\import lect09 (Decide, Eq, decideEq, no, yes)
\import lect11
\import Utils \hiding (<=-refl)

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  (\lam a a' compeq => p a a' (\case f a \as b, f a' \as b', compeq : g b = g b' \return b = b' \with {
    b, b', cpeq => q b b' cpeq
  }))

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam a a' compeq => p a a' (pmap g compeq)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.


\func isMultipleOf3Or5 (n : Nat) : \Type => \Sigma (mod3 n = 0 -> Empty) (mod5 n = 0 -> Empty) -> Empty

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => Impl-isProp (Empty-isProp)

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc =>
  \lam a a' p => \let
                | x => isMultipleOf3Or5-isProp a'.1
    \in sigmaEq isMultipleOf3Or5 a a' p (x (transport isMultipleOf3Or5 p a.2) a'.2)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) => (isTriv-lem-> A, isTriv-lem<- A)
 \where {
   \func isTriv-lem<- (A : \Type) (hotel? : (\Sigma (isProp A) A)) : isTriv A
     => (hotel?.2, \lam x => hotel?.1 hotel?.2 x)

   \func isTriv-lem-> (A : \Type) (trivago : isTriv A) : (\Sigma (isProp A) A)
     => (\lam x y => (inv (trivago.2 x)) *> trivago.2 y, trivago.1)

 }

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty
  => \case p {\Sigma} {\Sigma} Unit-isProp Unit-isProp (Utils.inl ()) (Utils.inr ()) \with {}

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => \lam x y => LessOrEq-isProp-recursive n m x y
  \where {
    \func LessOrEq-isProp-recursive (n m : Nat) (x y : LessOrEq n m) : x = y
      | 0, 0, z<=n, z<=n => idp
      | 0, suc m, z<=n, z<=n => idp
      | suc n, suc m, s<=s x, s<=s y => pmap (s<=s) (LessOrEq-isProp-recursive n m x y)
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)


\func Nat-isSet : isSet Nat
  => Dec-isSet decideEq
      \where {
        -- инстанс Eq Nat не хочет работать по какой-то причине, так надёжнее :)
        \func decideEq (x y : Nat) : Decide (x = y) \with {
         | 0, 0 => yes idp
         | 0, suc y => no (\case __ \with {})
         | suc x, 0 => no (\case __ \with {})
         | suc x, suc y => \case decideEq x y \with {
           | yes x=y => yes (pmap suc x=y)
           | no x/=y => no (\lam e => x/=y (pmap pred e))
        }
        }
      }

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => \lam x y => ReflClosure_<-isProp-refl n m x y
  \where {
    \func ReflClosure_<-isProp-refl (n m : Nat) (x y : ReflClosure (\lam x y => T (x < y)) n m) : x = y
      | 0, 0, _, inc ()
      | 0, 0, inc (), _
      | 0, suc _, refl (), _
      | 0, suc _, _, refl ()
      | 0, suc m, inc r, inc s => pmap inc (Unit-isProp r s)
      | suc _, 0, refl (), _
      | suc _, 0, inc (), _
      | n, m, refl x, refl y => pmap refl (equality-isProp Nat-isSet n m x y)
      | suc n, suc m, inc r, refl y =>  \case eq-pred-lemma y \as eq, n < m \as leq, idp : n < m = leq, r : T(leq) \with {
        | eq, true, p, n-leq-m-true => \let
          | n-leq-m-false => transport (\lam k => n < k = false) eq (<-refl-is-false n)
                                       \in contradiction
      }
      | suc n, suc m, refl x, inc s => \case eq-pred-lemma x \as eq, n < m \as leq, idp : n < m = leq, s : T(leq) \with {
        | eq, true, p, n-leq-m-true => \let
                               | n-leq-m-false => transport (\lam k => n < k = false) eq (<-refl-is-false n)
                            \in contradiction
      }
      | suc n, suc m, inc r, inc s => pmap inc T-lem

    \func eq-pred-lemma {m n : Nat} (p : suc m = suc n) : m = n \elim m, n, p
      | 0, 0, p => idp
      | suc m, suc n, p => pmap suc (eq-pred-lemma {m} {n} p)
    \func <-refl-is-false (n : Nat) : n < n = false
      | 0 => idp
      | suc n => <-refl-is-false n
  }


\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty
  => \case p 0 0 (refl idp) (inc z<=n) \with {}

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A =>
  \lam a b => p a b (q (f a) (f b))

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

-- зачем-то доказал, жалко выкидывать:
\func Dec-isProp {X : \Type} (p : isProp(X)) : isProp (Decide X)
  => \lam x y => \case \elim x, \elim y \with {
    | yes a, yes b => pmap yes (p a b)
    | yes a, no n => \case n a \with {}
    | no n, yes a => \case n a \with {}
    | no n, no n' => pmap no (funExt (\lam _ => Empty) n n' (\lam t => \case n t \with {}))
  }

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  =>  \lam x y => \case dec x y \with {
--    | yes yo => retract'-isProp {x = y} {Decide (\Sigma)} (Dec-isProp Unit-isProp)
--         (\lam _ => const' dec yo) (\lam w => (yes (), aux dec w))
    | yes yo => \lam p q => \let | x => lemma1 dec p
                                 | y => lemma1 dec q
                                 | z => pmap (__ *> (sym (unify dec idp))) (lemma2 dec p q)
                            \in sym x *> z *> y
    | no n => \lam p q => \case n p \with {}
  }
  \where {
    \func unify {A : \Type} {x y : A} (dec : \Pi (x y : A) -> Decide (x = y)) (p : x = y) : x = y
      => \case dec x y \with {
        | yes a => a
        | no n => \case n p \with {}
      }

    \func lemma1 {A : \Type} {x y : A} (dec : \Pi (x y : A) -> Decide (x = y)) (p : x = y)
      : unify dec p *> sym (unify dec idp) = p
      -- при превращении p -> idp с помощью самого же p : x = y,
      -- мы получим unify dec idp *> sym (unify dec idp) = idp, что верно
    \elim x, y, p
      | x, y, idp => sym-right (unify dec idp)

    \func lemma2 {A : \Type} {x y : A} (dec : \Pi (x y : A) -> Decide (x = y)) (p : x = y) (q : x = y)
      : unify dec p = unify dec q
    => unfold (unify) (\case dec x y \as dxy
                             \return
    (\case dxy \with {
      | yes a => a
      | no n => \case n p \with {}
    }) = (\case dxy \with {
      | yes a => a
      | no n => \case n q \with {}
    })
    \with {
      | yes a => idp
      | no n => idp
    })

  }


-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) =>
  \lam x y => \case \elim x, \elim y \with {
    | inl a, inl b => retract-isProp {inl a = inl b} {a = b} (p a b) de-pmap-inl (pmap inl) pmap-depmap-inl-id
    | inl a, inr b => \lam u v => \case u \with {}
    | inr b, inl a => \lam u v => \case u \with {}
    | inr a, inr b => retract'-isProp {inr a = inr b} {a = b} (q a b) (pmap inr) (\lam x => (de-pmap-inr x, pmap-depmap-inr-id _))
  }
  \where {
    \func de-inl {A B : \Type} (default : A) (or : Or A B) : A \elim or
      | inl a => a
      | inr _ => default

    \func de-inr {A B : \Type}(default : B) (or : Or A B)  : B \elim or
      | inl _ => default
      | inr b => b

    \func de-pmap-inl {A B : \Type} {a b : A} (p : inl {A} {B} a = inl {A} {B} b) : a = b
      => pmap (de-inl a) p

    \func de-pmap-inr {A B : \Type} {a b : B} (p : inr {A} {B} a = inr {A} {B} b) : a = b
      => pmap (de-inr b) p

    \func pmap-depmap-inl-id {A B : \Type} {a b : A} (p : inl {A} {B} a = inl {A} {B} b) : pmap (inl {A} {B}) (de-pmap-inl p) = p
      => unfold (de-pmap-inl, pmap) (
        \let | eq => (path (\lam t x => (coe (\lam i => inl (de-inl a (p @ i)) = p @ i) idp x) @ t))
        \in rewrite eq idp)

    \func pmap-depmap-inr-id {A B : \Type} {a b : B} (p : inr {A} {B} a = inr {A} {B} b) : pmap (inr {A} {B}) (de-pmap-inr p) = p
      => unfold (de-pmap-inr, pmap) (
        \let | eq => (path (\lam t x => (coe (\lam i => inr (de-inr b (p @ i)) = p @ i) idp x) @ t))
        \in rewrite eq idp)
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x)
  => \lam f g s1 s2 => \let
                         | step1 => \lam (x : A) => (p x) (f x) (g x)
                         | step2 => forall-isProp (\lam i => f i = g i) step1
                         | step3 => retract'-isProp {f = g} step2 (funExt B f g)
                                    (\lam pp => (
                                      \lam tt => pmap (\lam ff => ff tt) pp, idp
                                    ))
                       \in step3 s1 s2

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => List-isSet-rec pA
  \where {
    \func List-isSet-rec {A : \Type} (pA : isSet A) (l1 : List A) (l2 : List A) : isProp (l1 = l2)
     \elim l1, l2
--     | nil, nil => (retract-isProp {nil = nil} (Unit-isProp) (\lam _ => ()) (\lam _ => idp) (\lam t => {?}))
    | nil, nil => {?}
    | nil, cons a l => (retract-isProp {nil = cons a l} (Empty-isProp) (\lam pp => \case pp \with {}) (\lam l => \case l \with {})
    (\lam t => \case t \with {}))
    | cons a l, nil => (retract-isProp {cons a l = nil} (Empty-isProp) (\lam pp => \case pp \with {}) (\lam l => \case l \with {})
    (\lam t => \case t \with {}))
    | cons a l, cons a' l' =>
      \let
        | step1 => List-isSet-rec pA l l'
        | step2 => pA a a'
        | step3 => Sigma-isProp step2 step1
        | step4 => retract'-isProp {cons a l = cons a' l'} step3 (\lam t => path (\lam i => cons (t.1 @ i) (t.2 @ i)))
                   (\lam t => (list-to-pair t,
                               \let
                                    | stepx => path (\lam b x => (coe (\lam i => (cons ((list-to-pair t).1 @ i) ((list-to-pair t).2 @ i)) = t @ i) idp x) @ b)
                               \in rewrite stepx idp))
      \in step4


    \func list-to-pair {A : \Type} {a a' : A} {l l' : List A} (p : cons a l = cons a' l') : \Sigma (a = a')(l = l')
      | {A}, {a}, {a'}, {nil}, {nil}, p => (path (\case (p @ __) \with {
        | nil => a
        | cons anew l => anew
      }), idp)
      | {A}, {a}, {a'}, {cons a1 l}, {cons a2 l'}, p => (path (\case (p @ __) \with {
        | nil => a
        | cons anew l => anew
      }), path (\case (p @ __) \with {
        | nil => nil
        | cons anew l => l
      }))
  }

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}