\import Algebra.Meta
\import Equiv (Section)
\import Equiv.Univalence
\import Meta
\import Paths (idpe)
\import Paths.Meta
\import lect12
\import Utils \hiding (transport,Or,inl,inr)

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A.

\func trunc-prop {A : \Prop} : Trunc A <-> A => (trunc-prop-1, trunc-prop-2)
  \where {
    \func trunc-prop-1 {A : \Prop}(tr : Trunc A) : A \elim tr
      | trunc a => a

    \func trunc-prop-2 {A : \Prop} (a : A) : Trunc A => trunc a
  }

-- 2. Докажите следующий закон де Моргана.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C))
  => (deMorgan-2 A B C, deMorgan-1 A B C)
  \where {
    \func deMorgan-2 (A B C : \Prop) (prop : (\Sigma A (B `Or` C))) : ((\Sigma A B) `Or` (\Sigma A C))
      \elim prop
        | (a,o) => \case \elim o \with {
          | inl b => inl (a,b)
          | inr c => inr (a,c)
        }

    \func deMorgan-1 (A B C : \Prop) (prop : ((\Sigma A B) `Or` (\Sigma A C))) : (\Sigma A (B `Or` C))
      \elim prop
        | inl ab => (ab.1, inl (ab.2))
        | inr ac => (ac.1, inr (ac.2))
  }

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or.

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p => \let lemma => Or-rec {A} {B} {\Sigma (q : A `Or` B) (C q)}
                                                                    (\lam a => (inl a, f a))
                                                                    (\lam b => (inr b, g b)) p
                                      \in rewrite (Path.inProp p lemma.1) lemma.2

-- 4. Докажите, что тип утверждений является множеством.

\func prop-isSet : isSet \Prop => \lam x y => Path.inProp {x = y}

-- 5. Докажите, что функции Prop1-to-Prop2 и Prop2-to-Prop1 взаимно обратны и, как следствие, что Prop1 = Prop2.
\func p2->p1---->p1->p2 (X : \Prop) : (Prop2-to-Prop1 (Prop1-to-Prop2 X)) = X
  => unfold (Prop1-to-Prop2, Prop2-to-Prop1) {?}

\func p1->p2---->p2->p1 (X : Prop2) : (Prop1-to-Prop2 (Prop2-to-Prop1 X)) = X
  => unfold (Prop1-to-Prop2, Prop2-to-Prop1) {?}

\func Prop1-eq-Prop2 : Prop1 = Prop2 => equivalence=>equality Prop1 Prop2 (Prop1-to-Prop2, Prop2-to-Prop1, p2->p1---->p1->p2, p1->p2---->p2->p1)

-- Можно сделать только одно из упражнений 6a,6b на выбор.
-- 6a. Тип С называется когенератором, если для любых множеств A и B и любых функция f,g : A -> B верно, что если h `o` f = h `o` g для всех h : B -> C, то f = g.
--     Докажите, что \Prop является когенератором.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h `o` f = h `o` g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop => \lam f g lp => {?}

-- 6b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B сущесвует функция l : B -> X такая, что l `o` i = f.
--     Докажите, что \Prop инъективен.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)

\func Prop-isInjective : isInjective \Prop => \lam a-prop a-b injb => (\lam b => {?}, {?})

-- Можно сделать только одно из упражнений 7a,7b на выбор.
-- 7a. Докажите, что (Bool = Bool) = Bool.

\func BoolAut : (Bool = Bool) = Bool => equivalence=>equality (Bool = Bool) Bool
    (\lam eq => (equality=>equivalence Bool Bool eq).1 true, -- превращаем равенство в отображение lhs -> rhs и подставляем true
     \lam b => \case b \with {
      | true => equivalence=>equality Bool Bool (\lam x => x, \lam x => x, idpe, idpe) -- автоморфизм Bool -> Bool №1
      | false => equivalence=>equality Bool Bool (not, not, not-not, not-not)          -- автоморфизм Bool -> Bool №2, других автоморфизмов нет
    }, \lam q => {?}, \lam b => \case \elim b \with {
      | true => {?} -- должно быть верно, но не знаю, как показать
      | false => unfold (equality=>equivalence) {?} -- аналогично тут
    })

-- 7b. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств.
