\import Logic (Not)
\import Meta
\import Paths (funExt, idpe, inv, transportInv)
\import Paths.Meta
\import Set
\import Set.Fin
\import Utils
\import hw04 (reverse, reverse++, reverse-isInvolutive)
\import lect05 (filter)
\import lect07
\import lect12 (equality=>equivalence, equivalence=>equality)
\import lect13
\import lect14

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s
  => setExt (add x (add x s)) (add x s) (\lam e => (\lam arg => \case addProp e x (add x s) arg \with {
    | byLeft p => rewrite p (addHead x s)
    | byRight b => b
  }, addTail e x (add x s)))

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s)
  => setExt _ _ (\lam e => (add-swap-arr x y e _, add-swap-arr y x e _))
  \where {
    \func add-swap-arr {S : SetSpec} (x y e : S.A) (s : S) (p : isElem e (add x (add y s))) : isElem e (add y (add x s))
      => \case addProp e x _ p \with {
        | byLeft a => rewrite a (addTail _ _ _ (addHead _ s))
        | byRight q => \case addProp e y _ q \with {
          | byLeft a => rewrite a (addHead _ _)
          | byRight b => addTail _ _ _ (addTail _ _ _ b)
        }
      }
  }

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\func subsets {A : \Set} : SetSpec {A} (A -> \Prop)
  => \new SetSpec {A} (A -> \Prop) {
    | empty => \lam a => Not (a = a)
    | add => \lam e s => \lam e' => (e' = e) `Or` (s e')
    | isElem => \lam a s => s a
    | setExt => \lam p1 p2 h => funExt (\lam _ => \Prop) p1 p2 (\lam x => (equivalence=>equality (p1 x) (p2 x) ((h x).1, (h x).2, \lam t => Paths.pathInProp _ _ _, \lam t => Paths.pathInProp _ _ _)))
    | emptySpec => \lam e => (__ idp)
    | addHead => \lam x _ => byLeft idp
    | addTail => \lam _ _ _ p => byRight p
    | addProp => \lam _ _ _ x => x
  }

-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него.

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> (S.A -> \Prop)) (isInj f)
  => (\lam set elem => isElem elem set, \lam l1 l2 h => setExt l1 l2
      (\lam e => \let quad => equality=>equivalence _ _ (path (\lam i => (h @ i) e)) \in (quad.1, quad.2))
     )

-- 4. Определите функцию isEmpty для произвольного конечного множества и для ListSet.

-- способ один -- довольно сложный, нужно извлечь список из утверждения, и в зависимости от его непустоты вернуть true\false
-- проблема -- превращение в prop кажется очень страшным
\func isEmptySet' {S : FinSetSpec} (x : S) : Bool =>
  \let finiteList => finite x
  \in \case (Trunc.extract finiteList {?}).1 \with {
    | nil => true
    | cons _ _ => false
  }
  \where {
      \func isEmptySet-toProp {S : FinSetSpec} (s : S) (p : Trunc (\Sigma (xs : List S.A) (\Pi (x : S.A) -> S.isElem x s <-> In x xs)))
        : \Sigma (n : Nat) (Trunc (\Sigma (xs : List S.A) (\Pi (x : S.A) -> isElem x s <-> In x xs) (length xs = n)))
                 (\Pi (m : Nat) -> (Trunc (\Sigma (xs : List S.A) (\Pi (x : S.A) -> isElem x s <-> In x xs) (length xs = m))) -> n <= m)
        => {?}
    }
\func isEmptyListSet' {A : \Set} (x : ListSet A) : Bool => isEmptySet' x

\func isEmptySet {S : FinSetSpec} (x : S) : Bool => isEmptyListSet {S.A} (rewrite listSet=Set x)

-- однако, случаи фактор множества для списков можно разобрать относительно легко:
\func isEmptyListSet {A : \Set} (x : ListSet A) : Bool \elim x
  | inR nil => true
  | inR (cons _ _) => false
  | eq nil nil _ _ => true
  | eq nil (cons a1 _) e i => (absurd (\case (e a1).2 (here idp) \with {}) : true = false) @ i
  | eq (cons a1 _) nil e i => (absurd (\case (e a1).1 (here idp) \with {}) : false = true) @ i
  | eq (cons _ _) (cons _ _) _ _ => false

-- 5. Определите функцию union {A : \Set} : S A -> S A -> S A для произвольного S A (удовлетворяющего FinSetSpec) и для ListSet.
\func union {S : FinSetSpec} (s1 s2 : S) : S => rewriteI listSet=Set (unionListSet (rewrite listSet=Set s1) (rewrite listSet=Set s2))

\func unionListSet {A : \Set} (s1 s2 : ListSet A) : ListSet A \elim s1, s2
  | inR a, inR a1 => inR (a ++ a1)
  | inR a, eq al ar r i => eq (a ++ al) (a ++ ar) (lemma-EqList-left r) i
  | eq al ar r i, inR a => eq (al ++ a) (ar ++ a) (lemma-EqList-right r) i
  \where {
    \func lemma-EqList-left {A : \Set} {xs l1 l2 : List A} (p : EqList l1 l2) : EqList (xs ++ l1) (xs ++ l2) \elim xs
      | nil => p
      | cons a xxs => \let tr-call => lemma-EqList-left {A} {xxs} p
                      \in \lam x => (\case __ \with {
                                        | here q => here q
                                        | there i => there ((tr-call x).1 i)
                                     }, \case __ \with {
                                        | here q => here q
                                        | there i => there ((tr-call x).2 i)
                                     })


    -- осталось ощущение, будто бы я что-то подоказывал дважды, поскольку вышло очень громоздкое док-во
    \func lemma-EqList-right {A : \Set} {xs l1 l2 : List A} (p : EqList l1 l2) : EqList (l1 ++ xs) (l2 ++ xs)
      => \let | x => (reverse++ l1 xs)
              | y => (reverse++ l2 xs)
              | z => lemma-EqList-left {A} {reverse xs} (lemma-EqList-reverse p)
              | zz => transportInv (\lam t => EqList t _) x z
              | zzz => transportInv (\lam t => EqList _ t) y zz
              | q => lemma-EqList-reverse zzz
              | qq => transport (\lam t => EqList t _) (reverse-isInvolutive (l1 ++ xs)) q
              | qqq => transport (\lam t => EqList _ t) (reverse-isInvolutive (l2 ++ xs)) qq
              \in qqq

    \func lemma-EqList-reverse  {A : \Set} {l1 l2 : List A} (p : EqList l1 l2) : EqList (reverse l1) (reverse l2)
      => \lam x => (\lam xinl1 =>
                        \let | inxinv => (pmap (In x) (reverse-isInvolutive l1))
                             | xinrevrevl1 => lemma-inReverse xinl1
                             | xinl2 : In x l2 => ((p x).1) (rewriteI inxinv xinrevrevl1)
                         \in lemma-inReverse xinl2 ,
                    \lam xinl2 =>
                        \let | inxinv => (pmap (In x) (reverse-isInvolutive l2))
                             | xinrevrevl2 => lemma-inReverse xinl2
                             | xinl1 : In x l1 => ((p x).2) (rewriteI inxinv xinrevrevl2)
                        \in lemma-inReverse xinl1 )

    \func lemma-inReverse {A : \Set} {xs : List A} {x : A} (p : In x xs) : In x (reverse xs) \elim xs
      | nil => \case p \with {}
      | cons a xxs => \case p \with {
        | here q => lemma-in-left (here q)
        | there i => lemma-in-right (lemma-inReverse {A} {xxs} i)
      }
      \where {
        \func lemma-in-left {A : \Set} {xs l : List A} {x : A} (p : In x l) : In x (xs ++ l) \elim xs
          | nil => p
          | cons a xxs => \let tr-call => lemma-in-left {A} {xxs} p
                          \in there tr-call
        \func lemma-in-right {A : \Set} {xs l : List A} {x : A} (p : In x l) : In x (l ++ xs) \elim l
          | nil => \case p \with {}
          | cons a xxs => \let tr-call => lemma-in-left {A} {xxs} p
                          \in \case p \with {
                            | here q => here q
                            | there i => there (lemma-in-right i)
                          }
      }
  }

-- 6. Определите функцию intersection {A : DecSet} : S A -> S A -> S A для произвольного S A (удовлетворяющего FinSetSpec) и для ListSet.
\func intersection {A : DecSet} {S : FinSetSpec {A}} (s1 s2 : S) : S => rewriteI listSet=Set (intersectionListDecSet {A} (rewrite (listSet=Set {S}) s1) (rewrite (listSet=Set {S}) s2))

\func intersectionListDecSet {A : DecSet} (s1 s2 : ListSet A) : ListSet A \elim s1, s2
  | inR l1, inR l2 => inR (listIntersection l1 l2)
  | inR a, eq al ar r i => eq (listIntersection a al) (listIntersection a ar) (lemma-EqList-left  {A} {a} r) i
  | eq al ar r i, inR a => eq (listIntersection al a) (listIntersection ar a) (lemma-EqList-right {A} {a} r) i
  \where {
    \func elementInList {A : DecSet} (x : A) (l : List A) : Bool \elim l
      | nil => false
      | cons a l => \case decideEq a x \with {
        | yes _ => true
        | no  _ => elementInList x l
      }
      \where {
        \func elemInList->In {A : DecSet} {x : A} {l : List A} (p : elementInList x l = true) : In x l \elim l
          | nil => \case p \with {}
          | cons a l => \case decideEq a x \as dax, p : (\case dax \with {| yes _ => true | no _ => elementInList x l}) = true \with {
            | yes e, q => here (inv e)
            | no n , q => there (elemInList->In q)
          }

        \func elemInList->NotIn {A : DecSet} {x : A} {l : List A} (p : elementInList x l = false) : Not(In x l) \elim l
          | nil => \lam i => \case i \with {}
          | cons a l => \case decideEq a x \as dax, p : (\case dax \with {| yes _ => true | no _ => elementInList x l}) = false \with {
            | yes e, q => \case q \with {}
            | no n , q => \lam e => (\case e \with {
              | here pp => n (inv pp)
              | there i => elemInList->NotIn q i
            })
          }
      }
    -- для таких определений может быть сложно доказать данный факт
    \func listIntersection {A : DecSet} (l1 l2 : List A) : List A => (filter (\lam x => elementInList x l1) l2)
      \where {
        \func sym-li {A : DecSet} (l1 l2 : List A) : EqList (listIntersection l1 l2) (listIntersection l2 l1) \elim l2
          | nil => unfold (listIntersection) (\lam x => rewrite (falseFilter l1) (\lam i => i, \lam i => i))
          | cons a2 ll2 => \lam x =>
              (listIntersection-inPerm {A} {l1} {cons a2 ll2},
               listIntersection-inPerm {A} {cons a2 ll2} {l1})

        \func falseFilter {A : DecSet} (l : List A) : (filter (\lam _ => false) l) = nil \elim l
          | nil => idp
          | cons a l => falseFilter l

        \func listIntersection-inPerm {A : DecSet} {l1 l2 : List A} {x : A} (p : In x (listIntersection l1 l2)) : In x (listIntersection l2 l1)
          \elim l2
            | nil => \case p \with {}
            | cons a ll2 => \case decideEq x a \with {
              | yes x=a => {?}
              | no not-x=a => {?}
            }


        \func listIntersection-deduplicate {A : DecSet} {l1 l2 : List A} {x : A} (p : In x (listIntersection l1 l2)) : \Sigma (In x l1)(In x l2)
          \elim l2
            | nil => \case p \with {}
            | cons a l2 => {?}
      }


    -- вот это утверждение очень сложно доказать, хотя оно кажется очевидным. Всё из-за определения filter и listIntersection
    \func lemma-EqList-left {A : DecSet} {xs l1 l2 : List A} (p : EqList l1 l2) : EqList (listIntersection xs l1) (listIntersection xs l2)
      =>  (\lam x => \let | l1xs<->l2xs => lemma-EqList-right {A} {xs} {l1} {l2} p x
                          | l1xs<->xsl1 => listIntersection.sym-li {A} l1 xs x
                          | l2xs<->xsl2 => listIntersection.sym-li {A} l2 xs x
                     \in(\lam xsl1 => l2xs<->xsl2.1 (l1xs<->l2xs.1 (l1xs<->xsl1.2 xsl1)),
                         \lam xsl2 => l1xs<->xsl1.1 (l1xs<->l2xs.2 (l2xs<->xsl2.2 xsl2))))

    \func lemma-EqList-right {A : DecSet} {xs l1 l2 : List A} (p : EqList l1 l2) : EqList (listIntersection l1 xs) (listIntersection l2 xs) \elim xs
      | nil => unfold (listIntersection) (\lam x => (\lam id => id, \lam id => id))
      | cons a xxs => unfold (listIntersection) (
        \case elementInList a l1 \as ain1, elementInList a l2 \as ain2, idp : elementInList a l1 = ain1, idp  : elementInList a l2 = ain2
        \return
          EqList (\case ain1 \with {
          | true => cons a (filter (\lam x => elementInList x l1) xxs)
          | false => filter (\lam x => elementInList x l1) xxs
          }) (\case ain2 \with {
              | true => cons a (filter (\lam x => elementInList x l2) xxs)
              | false => filter (\lam x => elementInList x l2) xxs
            })
              \with
    {
                | true,  true,  eq1, eq2 => \let rec => lemma-EqList-right {A} {xxs} p
                                            \in \lam x => (\lam in => \case in \with {
                                              | here p => here p
                                              | there i => there ((rec x).1 i)
                                            }, \lam in => \case in \with {
                                              | here p => here p
                                              | there i => there ((rec x).2 i)
                                              })
                | true,  false, eq1, eq2 => \let | in1 => elemInList->In eq1 | in2 => elemInList->NotIn eq2
                                            \in \case in2 (((p a).1) in1) \with {}
                | false, true,  eq1, eq2 => \let | in1 => elemInList->NotIn eq1 | in2 => elemInList->In eq2
                                            \in \case in1 (((p a).2) in2) \with {}
                | false, false, eq1, eq2 => lemma-EqList-right {A} {xxs} p
              })
        \where {
          \open elementInList
        }

    -- можно попробовать другой подход, только тут тип зависимых пар, а не список...:
    \func listIntersection' {A : DecSet} (l1 l2 : List A) => \Sigma (x : A) (In x l1 <-> In x l2)
  }

-- 7. Мы не можем определить функция size в общем случае, но мы можем определить предикат S -> Nat -> \Prop, соответствующий \lam xs n => size xs <= n.
--    Задайте этот предикат и докажите, что он эквивалентен обычному определению, если A -- разрешимо и S -- конечно.
\func size-as-injection-in-finite {S : SetSpec} (s : S) (n : Nat) => Trunc (\Sigma (f : \Pi(\Sigma(x : S.A)(isElem x s)) -> Fin n) (isInj f))

-- Optional
-- 8. Определите предикат isFin : \Type -> \Prop так, чтобы множество \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P A))) удовлетворяло FinSetSpec, определите этот инстанс.

-- Optional
-- 9. Определите NubListSet и инстанс FinSetSpec для него.
