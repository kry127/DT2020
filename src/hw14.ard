\import Paths (funExt, idpe)
\import Paths.Meta
\import Utils
\import lect12 (equivalence=>equality)
\import lect13
\import lect14

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s
  => setExt (add x (add x s)) (add x s) (\lam e => (\lam arg => \case addProp e x (add x s) arg \with {
    | byLeft p => rewrite p (addHead x s)
    | byRight b => b
  }, addTail e x (add x s)))

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s)
  => setExt _ _ (\lam e => (add-swap-arr x y e _, add-swap-arr y x e _))
  \where {
    \func add-swap-arr {S : SetSpec} (x y e : S.A) (s : S) (p : isElem e (add x (add y s))) : isElem e (add y (add x s))
      => \case addProp e x _ p \with {
        | byLeft a => rewrite a (addTail _ _ _ (addHead _ s))
        | byRight q => \case addProp e y _ q \with {
          | byLeft a => rewrite a (addHead _ _)
          | byRight b => addTail _ _ _ (addTail _ _ _ b)
        }
      }
  }

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\func subsets {A : \Set} : SetSpec {A} (A -> \Prop)
  => \new SetSpec {A} (A -> \Prop) {
    | empty => \lam a => Not (a = a)
    | add => \lam e s => \lam e' => (e' = e) `Or` (s e')
    | isElem => \lam a s => s a
    | setExt => \lam p1 p2 h => funExt (\lam _ => \Prop) p1 p2 (\lam x => (equivalence=>equality (p1 x) (p2 x) ((h x).1, (h x).2, \lam t => Paths.pathInProp _ _ _, \lam t => Paths.pathInProp _ _ _)))
    | emptySpec => \lam e => (__ idp)
    | addHead => \lam x _ => byLeft idp
    | addTail => \lam _ _ _ p => byRight p
    | addProp => \lam _ _ _ x => x
  }

-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него.

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> (S.A -> \Prop)) (isInj f)
  => {?}

-- 4. Определите функцию isEmpty для произвольного конечного множества и для ListSet.

\func isEmptySet {S : FinSetSpec} (x : S) : Bool => {?}

\func isEmptyListSet {A : \Set} (x : ListSet A) : Bool => {?}

-- 5. Определите функцию union {A : \Set} : S A -> S A -> S A для произвольного S A (удовлетворяющего FinSetSpec) и для ListSet.

-- 6. Определите функцию intersection {A : DecSet} : S A -> S A -> S A для произвольного S A (удовлетворяющего FinSetSpec) и для ListSet.

-- 7. Мы не можем определить функция size в общем случае, но мы можем определить предикат S -> Nat -> \Prop, соответствующий \lam xs n => size xs <= n.
--    Задайте этот предикат и докажите, что он эквивалентен обычному определению, если A -- разрешимо и S -- конечно.

-- Optional
-- 8. Определите предикат isFin : \Type -> \Prop так, чтобы множество \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P A))) удовлетворяло FinSetSpec, определите этот инстанс.

-- Optional
-- 9. Определите NubListSet и инстанс FinSetSpec для него.
