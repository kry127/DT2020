\import Utils

-- 1. Матчинг с idp.

\func sym'' {A : \Type} {a a' : A} (p : a = a') : a' = a \elim p
  | idp => idp

\func trans1 {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' \elim p
  | idp => q

\func trans2 {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' \elim q
  | idp => p

\func trans3 {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' \elim p, q
  | idp, idp => idp

\func transport''' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' \elim p
  | idp => b

-- \func foo (p : 0 = 1) : \Sigma \elim p
--   | idp => {?}

\func bar (x : Nat) (p : x = 0) : \Sigma \elim p
  | idp => ()

-- \func baz (x : Nat) (p : x = x + x) : \Sigma \elim p
--   | idp => {?}
--   \where \open Nat

-- \func bak {A : \Type} (a : A) (p : a = a) : p = idp \elim p
--   | idp => idp

-- 2. Оператор J.

-- Оператор J является обобщением transport.
-- Если transport -- это независимый элиминатор, то J -- его зависимая версия.

-- Можно сравнить с элиминаторами для Nat.
{-
-- Независимая версия:
\func Nat-rec (B : \Type)
    (z : B)
    (s : Nat -> B -> B)
    (n : Nat)
    : B \elim n
    | 0 => z
    | suc n => s n (Nat-rec B z s n)

-- Зависимая версия:
\func Nat-elim (B : Nat -> \Type)
    (z : B 0)
    (s : \Pi (k : Nat) -> B k -> B (suc k))
    (n : Nat)
    : B n \elim n
    | 0 => z
    | suc n => s n (Nat-elim B z s n)
-}

-- Независимая версия:
\func transport''''
  {A : \Type}
  (B : A -> \Type)
  {a a' : A} (p : a = a')
  (b : B a)
  : B a' \elim p
  | idp => b

-- Зависимая версия:
\func J
  {A : \Type} {a : A}
  (B : \Pi (a' : A) -> a = a' -> \Type)
  (b : B a idp)
  {a' : A} (p : a = a')
  : B a' p \elim p
  | idp => b

-- Напоминание как выглядит элиминатор для Unit.
\data Unit | unit

\func Unit-elim
  (B : Unit -> \Type)
  (b : B unit)
  (p : Unit)
  : B p
\elim p
  | unit => b

-- Если переписать тип B в некаррированом виде, то получится следующая версия того же оператора:
-- Этот элиминатор в точности является элиминатором для Unit.
-- Таким образом, J говорит, что в типе \Sigma (a' : A) (a = a') ровно один элемент.
\func J'
  {A : \Type} {a : A}
  (B : (\Sigma (a' : A) (a = a')) -> \Type)
  (b : B (a, idp))
  (p : \Sigma (a' : A) (a = a'))
  : B p
  => J (\lam a' p => B (a',p)) b p.2

-- Это утверждение не типизируется.
-- \func =-unique' {A : \Type} {a a' : A} (p : a = a') : p = idp => {?}

-- Это утверждение типизируется, но не верно, т.е. в типе a = a может быть больше одного элемента.
-- \func =-unique {A : \Type} {a : A} (p : a = a) : p = idp => {?}

-- J говорит, что для определения функции над a = a' достаточно определить ее для idp.
-- При этом a' должен варьироваться вместе с a'.
-- Если мы определим версию J, в которой a' всегда равно a, то мы получим оператор K:
{-
\func K {A : \Type} {a : A} (B : a = a -> \Type)
    (b : B idp)
    (p : a = a) : B p => {?}
-}
-- Этот оператор эквивалентен =-unique.
-- Следовательно его невозможно доказать.
-- Его можно добавить как аксиому, но мы не будем этого делать.
-- Мы будем обсуждать его подробнее позже.

-- 3. Ассоциативность ++ для векторов.

\open Nat \hiding (<=)

\func +-assoc {n m k : Nat} : n + (m + k) = (n + m) + k \elim k
  | 0 => idp
  | suc k => pmap suc +-assoc

-- Ассоциативность для v++ даже сформулировать сложно, так как у (xs v++ ys) v++ zs и xs v++ (ys v++ zs) разные типы:
-- Vec A (k + (m + n)) и Vec A ((k + m) + n).
-- Это можно поправить при помощи transport, так как он позволяет любой элемент Vec A x превратить в элемент Vec A y, если x и y равны.
\func v++-assoc {A : \Type} {n m k : Nat}
                (xs : Vec A n) (ys : Vec A m) (zs : Vec A k)
  : transport (Vec A) +-assoc ((xs v++ ys) v++ zs) = xs v++ (ys v++ zs)
  \elim n, xs
    | 0, vnil => idp
    | suc n, vcons x xs => aux x ((xs v++ ys) v++ zs) (xs v++ (ys v++ zs)) +-assoc (v++-assoc xs ys zs)
    \where {
      \func aux
        {A : \Type} {i j : Nat}
        (x : A)
        (as : Vec A i) (bs : Vec A j)
        (p : i = j)
        (t : transport (Vec A) p as = bs)
        : transport (Vec A) (pmap suc p) (vcons x as) = vcons x bs
        \elim p
          | idp => pmap (vcons x) t
    }

-- 4. Предикаты.

-- Есть несколько способов определять предикаты над некоторым типом A:
-- * Выразить из через уже существующие (например равенство) и различные логические связки. Например, предикат isEven можно выразить как \lam n => \Sigma (k : Nat) (n = 2 * k).
-- * Рекурсивно. Этот способ работает только если A -- тип данных.
-- * Индуктивно.

-- Определение <= через равенство.
\func lessOrEq (n m : Nat) => \Sigma (k : Nat) (n + k = m)

-- Рекурсивное определение предиката <=
\func lessOrEq' (n m : Nat) : \Type \elim n, m
  | 0, m => \Sigma
  | suc _, 0 => Empty
  | suc n, suc m => lessOrEq' n m

{-

----------
  0 <= m


    n <= m
--------------
suc n <= suc m

 -}

-- Первое индуктивное определение <=
\data LessOrEq (n m : Nat) \elim n, m
  | 0, m => z<=_
  | suc n, suc m => s<=s (LessOrEq n m)

\func test11 : LessOrEq 0 100 => z<=_
\func test12 : LessOrEq 3 67 => s<=s (s<=s (s<=s z<=_))
-- \func test10 : LessOrEq 1 0 => ....

-- Один и тот же предикат можно определить индуктивно различными способами.
-- Когда мы хотим задать предикат индуктивно, нам нужно просто написать набор правил, которые верны для данного предиката и при этом пораждают его.
-- Например, в LessOrEq у нас два правила: 0 <= m для любого m и, если n <= m, то suc n <= suc m. Любое неравенство можно получить из этих двух правил.

-- Но это не единственный набор правил, который пораждает <=.
-- Например, мы можем взять следующий набор: n <= n для всех n и, если n <= m, то n <= suc m.
-- Этот набор реализован в LessOrEq''.

{-

   n = m
----------
  n <= m

 n <= m
----------
n <= suc m

 -}

-- Второе индуктивное определение <=
\data LessOrEq' (n m : Nat) \elim n, m
  | n, m => <=-refl (n = m)
  | n, suc m => <=-step (LessOrEq' n m)

-- 5. \case в языках с зависимыми типами является более сложной конструкцией в общем случаее, чем в языках без них.

-- foo лучше доказать, просто обобщив утверждение, но мы докажем ее через \case, чтобы продемонстировать возможности этой конструкции.
\func foo {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  -- Перед \with мы можем написать \return <expr>, где <expr> -- это тип, который возвращается из \case.
  -- После выражения, на котором мы паттерн матчимся, можно написать \as b, где b -- это переменная, которая будет связана в этой конструкции.
  -- Эту переменную можно использовать в выражении, которое идет после \return.
  -- Идея в том, что возвращаемый тип может зависеть от выражения, на котором мы паттерн матчимся.
  -- Эту конструкцию можно использовать, чтобы эту зависимость явно указать.
  \case p a \as b \return b = not (not b) \with {
    | true => idp -- В каждом отдельном случае нам нужно будет вернуть указанный после \return тип, в котором b заменено на соответствующий паттерн. Например, здесь нужно вернуть значение типа true = not (not true).
    | false => idp -- А здесь мы возвращаем значение типа false = not (not false).
  }

-- foo можно переписать через helper.
\func foo' {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) => aux (p a)
  \where {
    \func aux (b : Bool) : b = not (not b)
      | true => idp
      | false => idp
  }

-- 6. Пример доказательств через \case.

-- Вспомогательное утверждение.
\func <=-helper {x y : Nat} (p : x <= y) : x <= suc y \elim x, y, p
  | 0, _, _ => zero<=_
  | suc x, suc y, suc<=suc p => suc<=suc (<=-helper p)

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => \case p x \with {
    | true => cons x (filter p xs)
    | false => filter p xs
  }

\func <=-step-lem {n m : Nat} (n<=m : n <= m) : n <= suc m \elim n, m, n<=m
  | 0, m, zero<=_ => zero<=_
  | suc n, suc m, suc<=suc n<=m => suc<=suc (<=-step-lem n<=m)

-- Докажем, что длина отфильтрованного списка не превышает длины исходного.
\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A)
  : length (filter p xs) <= length xs \elim xs
  | nil => zero<=_
  | cons a xs => \case p a \as b \return
                                    length (\case b \with {
                                      | true => cons a (filter p xs)
                                      | false => filter p xs
                                    }) Nat.<= suc (length xs) \with {
    | true => suc<=suc (filter-lem p xs)
    | false => <=-step-lem (filter-lem p xs)
  }

-- 9. \case на idp.

-- Когда мы паттерн матчимся на некотором значении e, связь этого выражения с резльтатом паттерн матчинга теряется.
-- Например, в выражении \case e \with { | pat => expr } в expr мы даже не сможем доказать, что e равно pat.
-- Иногда бывает необходимо запоминать эту связь.
-- Для этого можно использовать следующий трюк.
-- Мы в \case кроме самого выражения еще паттерн матчимся на idp, но указываем ему тип, который зависит от первого значения.
-- Тогда в каждом случае q будем доказательством равенства между исходным значением и паттерном.
\func baz {A : \Type}
          (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  -- Мы можем явно указывать не только тип возвращаемого значения, но и типы выражений, на которых мы паттерн матчимся.
  -- И в них также можно использовать переменные, связанные в \as.
  \case p a \as b, idp : b = p a \with {
    | true, q => transport (\lam b => b = not (not b)) q idp -- Здесь q : true = p a
    | false, q => transport (\lam b => b = not (not b)) q idp -- Здесь q : false = p a
  }

-- 10. Еще один пример.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x
  => \case x \as x', f true \as ft, idp : f true = ft, f false \return f (f (f x')) = f x' \with {
    | true, true, p, _ => pmap (\lam x => f (f x)) p *> pmap f p
    | true, false, p, true => {?}
    | true, false, p, false => {?}
    | false, true, p, true => {?}
    | false, true, p, false => {?}
    | false, false, p, true => {?}
    | false, false, p, false => {?}
  }
