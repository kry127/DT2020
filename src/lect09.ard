\import Utils
\import hw06
\import hw09
\open Nat \hiding (<=, div)

-- 1. Разрешимые предикаты.

-- Предикат -- это функция вида P : A -> \Type.
-- Предикат называется разрешимым, если существует алгоритм, разрешающий его, то есть по a : A возвращающий true, если P a верно, и false, если ложно.

-- Так как у нас логика интуиционистская, то не все предикаты разрешимы.
-- На самом деле, исключенное третье эквивалентно утверждению о том, что все предикаты разрешимы.

-- Пример неразрешимого предиката, который мы запишем неформально, так как его формальное описание будет довольно длинным.
-- P : Nat -> \Type
-- P n = "останавливается ли машина Тьюринга с номером n на входе n"
--
-- Мы не можем ни доказать, что P разрешим, ни опровергнуть это, так как мы не предполагаем ни исключенное третье, ни его отрицание.
--
-- Более простой пример неразрешимого предиката -- это предикат равенства двух функций типа Nat -> Nat.

-- Мы можем определить предикат разрешимости на предикатах.
\data Decide (A : \Type)
  | yes A
  | no (Not A)

-- DecPred P верно в тогда и только тогда, когда P разрешим.
\func DecPred {A : \Type} (P : A -> \Type) => \Pi (a : A) -> Decide (P a)

-- f __ x + g __ y == \lam a b => f a x + g b y

-- Например, предикат \lam n => n = 0 разрешим.
\func decide0 : DecPred (\lam (n : Nat) => n = 0) => \lam n => \case \elim n \with {
  | 0 => yes idp
  | suc n => no (\case __ \with {})
}

-- Если верно исключенное третье, то все предикаты разрешимы.

-- 2. Разрешимое равенство.

-- Мы можем определить класс типов, являющийся аналогом Eq в хаскелле, но в котором вместо функции == : A -> A -> Bool будет хранится доказательство, что равенство разрешимо.
-- Это лучше, так как в хаскелле в качестве == мы можем написать вообще произвольную функцию, даже такую, которая не имеет никакого смысла.
-- А при таком определении Eq функция равенства всегда будет определена корректно.
\class Eq (A : \Type) {
  | decideEq (a a' : A) : Decide (a = a')
  -- Функции, объявленные внутри класса принимают неявно инстанс этого класса в качестве первого аргумента.
  \func \infix 4 == (a a' : A) : Bool => \case decideEq a a' \with {
    | yes _ => true
    | no _ => false
  }
}

\open Eq(==)

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

-- Докажем, что равенство натуральных чисел разрешимо.
\instance NatEq : Eq Nat
  | decideEq (x y : Nat) : Decide (x = y) \with {
    | 0, 0 => yes idp
    | 0, suc y => no (\case __ \with {})
    | suc x, 0 => no (\case __ \with {})
    | suc x, suc y => \case decideEq x y \with {
      | yes x=y => yes (pmap suc x=y)
      | no x/=y => no (\lam e => x/=y (pmap pred e))
    }
  }

\func test1 : (0 == 0) = true => idp
\func test2 : (0 == 1) = false => idp

-- DecEq A верно в точности тогда, когда предикат равенства на A разрешим.
\func DecEq (A : \Type) => \Pi (a a' : A) -> Decide (a = a')

-- 3. Предикаты A -> Bool

-- Разрешимые предикаты вида A -> \Type в точности соответствуют функциям вида A -> Bool.

-- Легко построить функции из A -> Bool в тип разрешимых предикатов и наоборот.
-- Эти функции почти взаимно обратны. Это будет верно, если правильно сформулировать это утверждение.
\func FromBoolToDec {A : \Type} (p : A -> Bool)
  : \Sigma (P : A -> \Type) (DecPred P)
  => (\lam a => T (p a), \lam a => \case p a \as x \return Decide (T x)\with {
    | true => yes ()
    | false => no (\lam x => x)
  })

\func FromDecToBool {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : A -> Bool
  => \lam a => \case P.2 a \with {
    | yes _ => true
    | no _ => false
  }

-- 4. Вселенные, полиморфизм по уровням.

-- Тип \Type0 содержит все типы, которые не упоминают \Type0.
-- Тип \Type1 содержит все типы, которые могут упоминать \Type0, но не \Type1.
-- И так далее. Тип \Type n содержит все типы, которые упоминают только \Type i для i < n.
-- Тип \Type i называется вселенной, а число i называется уровнем вселенной.
\func ttt : \Type2 => \Type0 -> \Type1

\func id (A : \Type) (a : A) => a

-- У каждого определения есть неявный параметр-уровень, к которому можно обратиться, написав \lp.
-- Например, функция id, определенная выше, эквивалентна такому определению:
\func id_ (A : \Type \lp) (a : A) => a

-- Когда мы пишем \Type без указания уровня, тайпчекер сам выводит минимальный подходящий уровень.
\func type : \Type => \Type

-- Например, в примере выше у \Type, который написан в теле функции, будет выведен уровень \lp.
-- У \Type, который написан в типе, уровень \lp не может быть, так как не верно, что \Type \lp : \Type \lp, поэтому он будет на 1 выше, то есть \suc \lp.
\func type_ : \Type (\suc \lp) => \Type \lp

-- На уровнях есть небольшой набор операций:
-- * Любое натуральное число является уровнем
-- * \suc l
-- * \max l1 l2
-- То есть любой уровень является либо константой, либо эквивалентен уровню вида \max (\lp + c) c', где c и c' -- константы, а \lp + c -- это уровень вида \suc (\suc ... (\suc \lp) ... ).
-- Уровень пи-типов и других конструкций над типами -- это максимум из уровней типов, входящих в эту конструкцию.
\func test0 : \Type (\max (\suc (\suc \lp)) 4) => \Type (\max \lp 3) -> \Type (\suc \lp)

-- Когда мы определяем полиморфную функцию, такую как id, мы хотим, чтобы тип A мог лежать в любой вселенной.
-- Поэтому все функции (и остальные определения) полиморфны по уровню вселенной, в которой они лежат.
\func id'' (A : \Type) (a : A) => a

-- Еще несколько примеров:
\func test1_ => id \lp Nat 0
\func test2_ => id (\suc \lp) \Type0 Nat
\func test3 => id (\suc (\suc \lp)) (\Type0 -> \Type1) (\lam X => X)
\func test4 => id (\suc \lp) _ id
\func test4' => id (\suc \lp) (\Pi (A : \Type \lp) -> A -> A) (id \lp)

-- При обращении к определению можно явно указать его уровень, то есть чему будет равен параметр \lp:
\func test5 => id (\Type \lp) Nat
-- Либо так:
\func test5' => id (\levels (\suc \lp) _) (\Type \lp) Nat
-- Второй вариант синтаксиса полезен когда уровень является константой:
\func test6 => id (\levels 2 _) \Type1 \Type0
-- Если при обращению к определению уровень не указан явно, он будет выведен автоматически как и в случае с \Type.
-- В большинстве случаев нет необходимости указывать уровень явно.

-- Параметры \data не влияют на его уровень.
\data Magma' (A : \Type0)
  | con (A -> A -> A)

\func test7 : \Type \lp => Magma' \lp Nat

-- Уровень класса зависит от того, какие поля реализованы.
\class Magma (A : \Type)
  | \infixl 6 ** : A -> A -> A

-- Например, уровень Magma \lp -- это \Type (\suc \lp), так как в определении Magma \lp появляется вселенная \Type \lp.
\func test8 : \Type (\suc \lp) => Magma \lp

-- Но уровень Magma \lp Nat -- это просто \Type 0, так как в нереализованных полях Magma Nat не встречаются вселенные.
\func test9 : \Type \lp => Magma \lp Nat

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} : (A -> B) -> F A -> F B

-- Уровень Functor \lp будет \Type (\suc \lp) даже если поле F реализовано, так как в поле fmap тоже появляется \Type \lp.

\func test10 : \Type (\suc \lp) => Functor \lp

\func test11 : \Type (\suc \lp) => Functor \lp Maybe

-- 5. Принципы индукции.

\func Nat-elim
  (E : Nat -> \Type)
  (z : E 0)
  (s : \Pi (n : Nat) -> E n -> E (suc n))
  (n : Nat) : E n \elim n
  | 0 => z
  | suc n => s n (Nat-elim E z s n)

-- Элиминатор для рекурсивного типа данных -- это просто принцип индукции для него.
-- Мы можем определять свои принципы индукции, которые удобнее использовать, чем стандартные.
-- Например, для натуральных чисел мы можем определить принцип индукции, который позволяет использовать индукционную гипотезу для любого числа, меньшего данного, а не только для числа, меньшего на 1.
\func Nat-ind
  (E : Nat -> \Type)
  (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> k < n -> E k) -> E n)
  (n : Nat) : E n => aux E r (suc n) n <=-refl
  \where {
    \func aux
      (E : Nat -> \Type)
      (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> k < n -> E k) -> E n)
      (n m : Nat) (p : m < n) : E m \elim n, p
      | suc n, suc<=suc m<=n => r m (\lam k k<m => aux E r n k (<=-trans k<m m<=n))
  }

-- 6. Индукция-рекурсия

-- Рекурсия-рекурсия -- это принцип, позволяющий определять взаимно рекурсивные функции.
-- Пример: функции isEven и isOdd.
\func isEven (n : Nat) : Bool
  | 0 => true
  | suc n => isOdd n

\func isOdd (n : Nat) : Bool
  | 0 => false
  | suc n => isEven n

-- Индукция-индукция -- это принцип, позволяющий определять взаимно рекурсивные типы данных.
-- Когда мы определяем взаимно рекурсивный тип данных, нужно явно указывать его тип.
-- Пример: типы IsEven и IsOdd.
\data IsEven (n : Nat) : \Type \with
  | 0 => zero-isEven
  | suc n => suc-isEven (IsOdd n)

\data IsOdd (n : Nat) : \Type \with
  | suc n => suc-isOdd (IsEven n)

-- Индукция-рекурсия -- это принцип, позволяющий определять тип данных, взаимно рекурсивный с функцией.
-- Мы увидим пример такого определения ниже.

-- 7. Вселенные.

-- \Type0 -- это тип, элементы которого -- это малые типы.
-- Такой тип называется вселенной.
-- Мы можем определить свою вселенную, состоящую только из определенного набора типов.

\data Type
  | nat
  | list Type
  | arr Type Type
  \where {
    \use \coerce toType (T : Type) => El T
  }

-- Мы должны еще определить функцию, которая переводит элементы Type в настоящие типы.
\func El (t : Type) : \Set0 \elim t
  | nat => Nat
  | list t => List (El t)
  | arr t t1 => El t -> El t1

\func idc (T : Type) (x : T) : T => x

-- \func Arr (A B : \Type) => A -> B

-- \func Pi (A : \Type) (B : A -> \Type) => \Pi (x : A) -> B x

-- Если мы хотим определить вселенную, в которой у нас есть заисимые типы, то такое определение должно быть индуктивно-рекурсивным.
\data Type' : \Set0
  | nat'
  | list' Type'
  | pi (A : Type') (El' A -> Type')

\func El' (t : Type') : \Set0 \elim t
  | nat' => Nat
  | list' t => List (El' t)
  | pi A B => \Pi (x : El' A) -> El' (B x)
