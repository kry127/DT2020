\import Set
\import Utils
\import lect11(sigmaEq,isProp)
\import lect12 (DecEq, propExt)
\import lect13

-- 1. Тип данных Set.

-- Спецификация типа данных Set.
-- setExt эквиваленнтен утверждению, что функция \lam x y => isElem y x : S -> (A -> \Prop) является инъективной.
-- То есть isElem вместе с setExt говорят, что S является подмножеством A -> \Prop, то есть состоит из подмножеств A.
-- empty вместе с emptyProp говорит, что пустое подмножество принадлежит S.
-- Вместе с add, addHead, addTail и addProp это влечет, что все конечные подмножества принадлежат S.
\class SetSpec {A : \Set} (S : \Set)
  | empty : S
  | add : A -> S -> S
  | isElem : A -> S -> \Prop

  | setExt (s1 s2 : S) : (\Pi (x : A) -> isElem x s1 <-> isElem x s2) -> s1 = s2
  | emptySpec (x : A) : Not (isElem x empty)
  | addHead (x : A) (s : S) : isElem x (add x s)
  | addTail (y x : A) (s : S) : isElem y s -> isElem y (add x s)
  | addProp (y x : A) (s : S) : isElem y (add x s) -> (y = x) `Or` isElem y s

\truncated \data In {A : \Type} (x : A) (xs : List A) : \Prop \elim xs
  | cons x' xs => { here (x = x') | there (In x xs) }

-- Определим отношение эквивалентности на списках.
-- Два списка эквивалентны, если они содержат одни и те же элементы.
\func EqList {A : \Set} (xs ys : List A) => \Pi (x : A) -> In x xs <-> In x ys

-- Простая реализация SetSpec: списки с точностью до эквивалентности EqList.
\func ListSet (A : \Set) => Quotient (List A) EqList

-- Мы хотим доказать, что наша спецификация полна, то есть, что ListSet -- это единственная реализация, удовлетворяющая ей.
-- Для этого достаточно построить биекцию между произвольной реализацией S и ListSet

-- Любому списку можно сопоставить множество.
\func listToSet {S : SetSpec} (xs : List S.A) : S \elim xs
  | nil => empty
  | cons a xs => add a (listToSet xs)

\lemma listToSet-lem1 {S : SetSpec} (xs : List S.A) (x : S.A) (p : In x xs)
  : isElem x (listToSet {S} xs) \elim xs, p
  | cons a xs, here idp => addHead a _
  | cons a xs, there p => addTail _ _ _ (listToSet-lem1 xs x p)

\lemma listToSet-lem2 {S : SetSpec} (xs : List S.A) (x : S.A)
                      (p : isElem x (listToSet xs)) : In x xs \elim xs
  | nil => absurd (emptySpec x p)
  | cons a xs => \case addProp _ _ _ p \with {
    | byLeft p => here p
    | byRight q => there (listToSet-lem2 xs x q)
  }

-- Эта функция уважает отношение эквивалентности, а значит у нас есть функция из ListSet в S.
\func listSetToSet {S : SetSpec} (xs : ListSet S.A) : S \elim xs
  | inR l => listToSet {S} l
  | eq l l' r i => S.setExt (listToSet l) (listToSet l')
      (\lam x => (\lam e => listToSet-lem1 l' x ((r x).1 (listToSet-lem2 l x e)),
                  \lam e => listToSet-lem1 l x ((r x).2 (listToSet-lem2 l' x e)))) @ i

-- Чтобы доказать, что listSetToSet является биекцией, достаточно показать, что она инъекция и сюръекция.
-- Инъективность легко доказывается:
\lemma listSetToSet-inj {S : SetSpec} (xs ys : ListSet S.A)
                        (p : listSetToSet xs = {S} listSetToSet ys) : xs = ys
  \elim xs, ys
    | inR xs, inR ys => path (eq xs ys (\lam x =>
        (\lam e => listToSet-lem2 ys x (transport (isElem x) p (listToSet-lem1 xs x e)),
         \lam e => listToSet-lem2 xs x (transport (isElem x) (sym p) (listToSet-lem1 ys x e)))))

-- Чтобы доказать сюръективность, нужно добавить условие, что в S лежат только конечные подмножества A.
\class FinSetSpec \extends SetSpec
  | finite (s : S) : Trunc (\Sigma (xs : List A) (\Pi (x : A) -> isElem x s <-> In x xs))

-- Теперь можно доказать сюръективность.
\func listSetToSet-sur {S : FinSetSpec} (s : S)
  : Trunc (\Sigma (xs : ListSet S.A) (listSetToSet {S} xs = s)) => \case finite s \with {
  | in (xs, f) => in (inR xs, setExt (listToSet xs) s (\lam x => (\lam x-in-l-xs => (f x).2 (listToSet-lem2 _ _ x-in-l-xs), \lam x-in-s => listToSet-lem1 _ _ ((f x).1 x-in-s))))
}

-- Наша спецификация корректна, то есть ListSet ей удовлетворяет.
\instance ListSetSet {A : \Set} : FinSetSpec {A} (ListSet A)
  | empty => inR nil
  | add => add
  | isElem => isElem
  | setExt s1 s2 p => \case \elim s1, \elim s2, \elim p \with {
    | inR xs, inR ys, p => quotientEq xs ys p
  }
  | emptySpec a p => \case p \with {}
  | addHead x s => \case \elim s \with {
    | inR xs => here idp
  }
  | addTail e x s p => \case \elim s, \elim p \with {
    | inR xs, p => there p
  }
  | addProp e x s p => \case \elim s, \elim p \with {
    | inR xs, here p => byLeft p
    | inR ys, there r => byRight r
  }
  | finite s => \case \elim s \with {
    | inR xs => in (xs, \lam x => (\lam p => p, \lam p => p))
  }
  \where {
    \func cons-lem {A : \Type} (x : A) (xs ys : List A) (y : A) (p : y `In` xs -> y `In` ys) (y-in-xs : y `In` cons x xs) : y `In` cons x ys \elim y-in-xs
      | here p => here p
      | there t => there (p t)

    \func add {A : \Set} (x : A) (xs : ListSet A) : ListSet A \elim xs
      | inR xs => inR (cons x xs)
      | eq xs ys r i => eq (cons x xs) (cons x ys) (\lam y => (cons-lem x xs ys y (r y).1, cons-lem x ys xs y (r y).2)) i

    \func isElem {A : \Set} (x : A) (xs : ListSet A) : \Prop \elim xs
      | inR xs => x `In` xs
      | eq xs ys r i => propExt {x `In` xs} {x `In` ys} (r x).1 (r x).2 @ i
  }

-- Наша спецификация полна, то есть ListSet -- это единственная ее реализация.
\func listSet=Set {S : FinSetSpec} : ListSet S.A = S =>
  \let t => isInj+isSur->isBij listSetToSet listSetToSet-inj listSetToSet-sur
  \in path (iso listSetToSet t.1 t.2 t.3)

-- Мы не предполагали, что равенство на A разрешимо.
-- Поэтому не все функции возможно реализовать для множеств, удовлетворяющих нашей спецификации (так как она корректна и полна, можно реализовать в точности те функции, которые реализуемы для ListSet).
-- Например, мы не можем реализовать функцию size : S -> Nat, так как размер множества add a (add a' empty) зависит от того равны ли a и a' или нет.

-- Но если равенство на A разрешимо, то мы можем реализовать все привычные функции.
\func size {S : FinSetSpec} (d : DecEq S.A) (s : S) : Nat => {?}

\func remove {S : FinSetSpec} (d : DecEq S.A) (a : S.A) (s : S) : S => {?}

-- Можно определить другие реализации FinSetSpec. Например, если равенство на A разрешимо, то можно брать только списки без повторяющихся элементов.
\func NubListSet (A : \Set) (d : DecEq A) => \Sigma (xs : List A) -- плюс условие, что все элементы в xs различны, и факторизация по перестановкам

-- 2. Тип данных Map.

\class MapSpec {K : DecSet} {V : \Set} (M : \Set)
  | emptyMap : M
  | put : M -> K -> V -> M
  | get : M -> K -> Maybe V
  | mapExt (m1 m2 : M) : (\Pi (k : K) -> get m1 k = get m2 k) -> m1 = m2
  | emptyMapProp (k : K) : get emptyMap k = nothing
  | putHead (m : M) (k : K) (v : V) : get (put m k v) k = just v
  | putTail (k k' : K) (_ : Not (k = k')) (v : V) (m : M) : get (put m k' v) k = get m k
